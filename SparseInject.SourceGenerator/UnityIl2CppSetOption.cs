namespace SparseInject.SourceGenerator;

public class UnityIl2CppSetOption
{
    public const string Code = "using System;\n\nnamespace Unity.IL2CPP.CompilerServices\n{\n    /// <summary>\n    /// The code generation options available for IL to C++ conversion.\n    /// Enable or disabled these with caution.\n    /// </summary>\n    public enum Option\n    {\n        /// <summary>\n        /// Enable or disable code generation for null checks.\n        ///\n        /// Global null check support is enabled by default when il2cpp.exe\n        /// is launched from the Unity editor.\n        ///\n        /// Disabling this will prevent NullReferenceException exceptions from\n        /// being thrown in generated code. In *most* cases, code that dereferences\n        /// a null pointer will crash then. Sometimes the point where the crash\n        /// happens is later than the location where the null reference check would\n        /// have been emitted though.\n        /// </summary>\n        NullChecks = 1,\n        /// <summary>\n        /// Enable or disable code generation for array bounds checks.\n        ///\n        /// Global array bounds check support is enabled by default when il2cpp.exe\n        /// is launched from the Unity editor.\n        ///\n        /// Disabling this will prevent IndexOutOfRangeException exceptions from\n        /// being thrown in generated code. This will allow reading and writing to\n        /// memory outside of the bounds of an array without any runtime checks.\n        /// Disable this check with extreme caution.\n        /// </summary>\n        ArrayBoundsChecks = 2,\n        /// <summary>\n        /// Enable or disable code generation for divide by zero checks.\n        ///\n        /// Global divide by zero check support is disabled by default when il2cpp.exe\n        /// is launched from the Unity editor.\n        ///\n        /// Enabling this will cause DivideByZeroException exceptions to be\n        /// thrown in generated code. Most code doesn't need to handle this\n        /// exception, so it is probably safe to leave it disabled.\n        /// </summary>\n        DivideByZeroChecks = 3,\n    }\n\n    /// <summary>\n    /// Use this attribute on an assembly, struct, class, method, or property to inform the IL2CPP code conversion utility to override the\n    /// global setting for one of a few different runtime checks.\n    ///\n    /// Example:\n    ///\n    ///     [Il2CppSetOption(Option.NullChecks, false)]\n    ///     public static string MethodWithNullChecksDisabled()\n    ///     {\n    ///         var tmp = new Object();\n    ///         return tmp.ToString();\n    ///     }\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Struct | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Delegate, Inherited = false, AllowMultiple = true)]\n    public class Il2CppSetOptionAttribute : Attribute\n    {\n        public Option Option { get; private set; }\n        public object Value { get; private set; }\n\n        public Il2CppSetOptionAttribute(Option option, object value)\n        {\n            Option = option;\n            Value = value;\n        }\n    }\n}\n";
}